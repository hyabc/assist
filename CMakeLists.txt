project(assist)
cmake_minimum_required(VERSION 2.8)
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
link_directories(${OpenCV_LIBRARY_DIRS})
link_directories(/home/nvidia/proj)
include_directories(/home/nvidia/VL53L0X_1.0.2//Api/core/inc)
include_directories(/home/nvidia/VL53L0X_rasp/platform/inc)
include_directories(/usr/include/libxml2)
add_executable(run laser_host.cpp assist.c)
target_link_libraries(run VL53L0X_rasp)
add_executable(test test_laser.cpp assist.c)
target_link_libraries(test VL53L0X_rasp)
add_executable(position position.cpp assist.c)
target_link_libraries(position curl xml2)
add_executable(deep deep.c assist.c)
target_link_libraries(deep m)
add_executable(judge judge.c assist.c)
target_link_libraries(judge m)
add_executable(spawn spawn.c)
add_executable(proxy proxy.cpp assist.c)
add_executable(monitor monitor.c assist.c)
add_executable(speech speech.cpp assist.c)
target_link_libraries(speech curl jsoncpp uuid pthread)
add_custom_target(vision-target ALL DEPENDS vision)
add_custom_command(OUTPUT assist.o  DEPENDS assist.c COMMAND gcc assist.c -c -o assist.o -O3)
add_custom_command(OUTPUT vision  DEPENDS vision.cpp assist.o assist.h COMMAND g++ -I/home/nvidia/darknet/include/ -I/home/nvidia/darknet/src/ -DOPENCV `pkg-config --cflags opencv`  -DGPU -I/usr/local/cuda/include/ -DCUDNN  -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC  -Ofast -DOPENCV -DGPU -DCUDNN vision.cpp /home/nvidia/darknet/src/image_opencv.cpp libdarknet.a -o vision -lm -pthread  `pkg-config --libs opencv` -lstdc++ -L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lcurand -lcudnn -lstdc++  libdarknet.a assist.o -g)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -g -Wall -O2")
set(CMAKE_C_FLAGS " ${CMAKE_C_FLAGS}  -g -Wall -O2")
